<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on icodego</title>
    <link>https://cwangtf.github.io/tags/php/</link>
    <description>Recent content in Php on icodego</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 30 Jun 2018 19:52:46 +0800</lastBuildDate>
    
	<atom:link href="https://cwangtf.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHP与Java通用AES加密解密算法</title>
      <link>https://cwangtf.github.io/work/cryptaes/</link>
      <pubDate>Sat, 30 Jun 2018 19:52:46 +0800</pubDate>
      
      <guid>https://cwangtf.github.io/work/cryptaes/</guid>
      <description>PHP代码： Java代码：        最近项目中遇到与第三方对接业务，涉及到签名与密码加密AES算法，而两方用的语言不一样，一方是PHP，另一方是Java，对接过程中遇到了算法不一致的问题
AES指高级加密标准（Advanced Encryption Standard）,是当前最流行的一种密码算法，在web应用开发，特别是对外提供接口时经常会用到
下面是查询资料及对接过程中找到可行的一套PHP与Java通用的AES加密解密算法，Mark一下
PHP代码： &amp;lt;?php class CryptAES { protected $cipher = MCRYPT_RIJNDAEL_128; protected $mode = MCRYPT_MODE_ECB; protected $pad_method = NULL; protected $secret_key = &#39;&#39;; protected $iv = &#39;&#39;; public function set_cipher($cipher) { $this-&amp;gt;cipher = $cipher; } public function set_mode($mode) { $this-&amp;gt;mode = $mode; } public function set_iv($iv) { $this-&amp;gt;iv = $iv; } public function set_key($key) { $this-&amp;gt;secret_key = $key; } public function require_pkcs5() { $this-&amp;gt;pad_method = &#39;pkcs5&#39;; } protected function pad_or_unpad($str, $ext) { if ( is_null($this-&amp;gt;pad_method) ) { return $str; } else { $func_name = __CLASS__ .</description>
    </item>
    
    <item>
      <title>PHP实现四种基本排序算法</title>
      <link>https://cwangtf.github.io/php-alg-sort/</link>
      <pubDate>Wed, 27 Jun 2018 23:02:24 +0800</pubDate>
      
      <guid>https://cwangtf.github.io/php-alg-sort/</guid>
      <description>1.冒泡排序 思路分析：在要排序的一组数中，对当前还未排好的序列，从前往后对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即，每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。
代码实现：
$arr=array(1,43,54,62,21,66,32,78,36,76,39); function bubbleSort($arr) { $len=count($arr); //该层循环控制 需要冒泡的轮数 for($i=1;$i&amp;lt;$len;$i++) { //该层循环用来控制每轮 冒出一个数 需要比较的次数 for($k=0;$k&amp;lt;$len-$i;$k++) { if($arr[$k]&amp;gt;$arr[$k+1]) { $tmp=$arr[$k+1]; $arr[$k+1]=$arr[$k]; $arr[$k]=$tmp; } } } return $arr; }  2.选择排序 思路分析：在要排序的一组数中，选出最小的一个数与第一个位置的数交换。然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。
代码实现：
function selectSort($arr) { //双重循环完成，外层控制轮数，内层控制比较次数 $len=count($arr); for($i=0; $i&amp;lt;$len-1; $i++) { //先假设最小的值的位置 $p = $i; for($j=$i+1; $j&amp;lt;$len; $j++) { //$arr[$p] 是当前已知的最小值 if($arr[$p] &amp;gt; $arr[$j]) { //比较，发现更小的,记录下最小值的位置；并且在下次比较时采用已知的最小值进行比较。 $p = $j; } } //已经确定了当前的最小值的位置，保存到$p中。如果发现最小值的位置与当前假设的位置$i不同，则位置互换即可。 if($p != $i) { $tmp = $arr[$p]; $arr[$p] = $arr[$i]; $arr[$i] = $tmp; } } //返回最终结果 return $arr; }  3.</description>
    </item>
    
  </channel>
</rss>