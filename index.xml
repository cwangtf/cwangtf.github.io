<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>icodego</title>
    <link>https://cwangtf.github.io/</link>
    <description>Recent content on icodego</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 30 Jun 2018 19:52:46 +0800</lastBuildDate>
    
	<atom:link href="https://cwangtf.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHP与Java通用AES加密解密算法</title>
      <link>https://cwangtf.github.io/work/cryptaes/</link>
      <pubDate>Sat, 30 Jun 2018 19:52:46 +0800</pubDate>
      
      <guid>https://cwangtf.github.io/work/cryptaes/</guid>
      <description>最近项目中遇到与第三方对接业务，涉及到签名与密码加密AES算法，而两方用的语言不一样，一方是PHP，另一方是Java，对接过程中遇到了算法不一致的问题
AES指高级加密标准（Advanced Encryption Standard）,是当前最流行的一种密码算法，在web应用开发，特别是对外提供接口时经常会用到
下面是查询资料及对接过程中找到可行的一套PHP与Java通用的AES加密解密算法，Mark一下
 PHP代码：  &amp;lt;?php class CryptAES { protected $cipher = MCRYPT_RIJNDAEL_128; protected $mode = MCRYPT_MODE_ECB; protected $pad_method = NULL; protected $secret_key = &#39;&#39;; protected $iv = &#39;&#39;; public function set_cipher($cipher) { $this-&amp;gt;cipher = $cipher; } public function set_mode($mode) { $this-&amp;gt;mode = $mode; } public function set_iv($iv) { $this-&amp;gt;iv = $iv; } public function set_key($key) { $this-&amp;gt;secret_key = $key; } public function require_pkcs5() { $this-&amp;gt;pad_method = &#39;pkcs5&#39;; } protected function pad_or_unpad($str, $ext) { if ( is_null($this-&amp;gt;pad_method) ) { return $str; } else { $func_name = __CLASS__ .</description>
    </item>
    
    <item>
      <title>PHP实现四种基本排序算法</title>
      <link>https://cwangtf.github.io/study/php-alg-sort/</link>
      <pubDate>Wed, 27 Jun 2018 23:02:24 +0800</pubDate>
      
      <guid>https://cwangtf.github.io/study/php-alg-sort/</guid>
      <description>1.冒泡排序 思路分析：在要排序的一组数中，对当前还未排好的序列，从前往后对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即，每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。
代码实现：
$arr=array(1,43,54,62,21,66,32,78,36,76,39); function bubbleSort($arr) { $len=count($arr); //该层循环控制 需要冒泡的轮数 for($i=1;$i&amp;lt;$len;$i++) { //该层循环用来控制每轮 冒出一个数 需要比较的次数 for($k=0;$k&amp;lt;$len-$i;$k++) { if($arr[$k]&amp;gt;$arr[$k+1]) { $tmp=$arr[$k+1]; $arr[$k+1]=$arr[$k]; $arr[$k]=$tmp; } } } return $arr; }  2.选择排序 思路分析：在要排序的一组数中，选出最小的一个数与第一个位置的数交换。然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。
代码实现：
function selectSort($arr) { //双重循环完成，外层控制轮数，内层控制比较次数 $len=count($arr); for($i=0; $i&amp;lt;$len-1; $i++) { //先假设最小的值的位置 $p = $i; for($j=$i+1; $j&amp;lt;$len; $j++) { //$arr[$p] 是当前已知的最小值 if($arr[$p] &amp;gt; $arr[$j]) { //比较，发现更小的,记录下最小值的位置；并且在下次比较时采用已知的最小值进行比较。 $p = $j; } } //已经确定了当前的最小值的位置，保存到$p中。如果发现最小值的位置与当前假设的位置$i不同，则位置互换即可。 if($p != $i) { $tmp = $arr[$p]; $arr[$p] = $arr[$i]; $arr[$i] = $tmp; } } //返回最终结果 return $arr; }  3.</description>
    </item>
    
    <item>
      <title>vim 批量查找替换</title>
      <link>https://cwangtf.github.io/study/linux-vim-replace/</link>
      <pubDate>Tue, 26 Jun 2018 23:04:56 +0800</pubDate>
      
      <guid>https://cwangtf.github.io/study/linux-vim-replace/</guid>
      <description>vim批量查找替换 当前行进行替换:s/XXX/YYY/gXXX是需要替换的字符串,YYY是替换后的字符串。
全局替换:% s/XXX/YYY/g.
对指定部分进行替换用V进入visual模式,再进行:s/XXX/YYY/g.
或指定行范围 替换::100, 102s/XXX/YYY/g.
替换字符串中的&amp;rdquo;/&amp;rdquo; 用&amp;rdquo;\&amp;ldquo;转义，即用&amp;rdquo;\/&amp;ldquo;表示。
查找在：中输入？ 或／ ，然后按n或N向后或向前查找
vi指令大全 进入vi的命令 vi filename: 打开或新建文件，并将光标置于第一行首 vi +n filename: 打开文件，并将光标置于第n行首 vi + filename: 打开文件，并将光标置于最后一行首 vi +/pattern filename: 打开文件，并将光标置于第一个与pattern匹配的串处 vi -r filename: 在上次正用vi编辑时发生系统崩溃，恢复filename vi filename....filename: 打开多个文件，依次进行编辑  移动光标类命令 h: 光标左移一个字符 l: 光标右移一个字符 space: 光标右移一个字符 Backspace: 光标左移一个字符 k或Ctrl+p: 光标上移一行 j或Ctrl+n: 光标下移一行 Enter: 光标下移一行 w或W : 光标右移一个字至字首 b或B : 光标左移一个字至字首 e或E : 光标右移一个字至字尾 ): 光标移至句尾 (: 光标移至句首 }: 光标移至段落开头 {: 光标移至段落结尾 nG: 光标移至第n行首 n+: 光标下移n行 n-: 光标上移n行 n$: 光标移至第n行尾 H: 光标移至屏幕顶行 M: 光标移至屏幕中间行 L: 光标移至屏幕最后行 0: 光标移至当前行首 $: 光标移至当前行尾  屏幕翻滚类命令 Ctrl+u: 向文件首翻半屏 Ctrl+d: 向文件尾翻半屏 Ctrl+f: 向文件尾翻一屏 Ctrl＋b: 向文件首翻一屏 nz: 将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。  插入文本类命令 i: 在光标前 I: 在当前行首 a: 光标后 A: 在当前行尾 o: 在当前行之下新开一行 O: 在当前行之上新开一行 r: 替换当前字符 R: 替换当前字符及其后的字符，直至按ESC键 s: 从当前光标位置处开始，以输入的文本替代指定数目的字符 S: 删除指定数目的行，并以所输入文本代替之 ncw或nCW: 修改指定数目的字 nCC: 修改指定数目的行  删除命令 ndw或ndW: 删除光标处开始及其后的n-1个字 do: 删至行首 d$: 删至行尾 ndd: 删除当前行及其后n-1行 x或X: 删除一个字符，x删除光标后的，而X删除光标前的 Ctrl+u: 删除输入方式下所输入的文本  搜索及替换命令 /pattern: 从光标开始处向文件尾搜索pattern ?</description>
    </item>
    
  </channel>
</rss>